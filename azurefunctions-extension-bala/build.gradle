/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerinax - Azure Functions Extension Annotations'

configurations {
    bDistributionDir
    balTools
    zipPartent
    extensionPlugin
}

dependencies {
    balTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    extensionPlugin project(path: ":azurefunctions-extension")
}

jar {
    enabled = false
}

clean {
    delete "$project.projectDir/output"
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

def packageName = "azure_functions"
def packageAbbreviation = "azurefunctions"
def packageOrg = "ballerinax"
def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def debugParams = ""
def balJavaDebugParam = ""
def groupParams = ""
def disableGroups = ""
def testParams = ""
def needSeparateTest = false
def needBuildWithTest = true
def needPublishToCentral = false
def needPublishToLocalCentral = false

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
    if (project.hasProperty("publishToLocalCentral") && (project.findProperty("publishToLocalCentral") == "true")) {
        needPublishToLocalCentral = true
    }
    if (project.hasProperty("publishToCentral") && (project.findProperty("publishToCentral") == "true")) {
        needPublishToCentral = true
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageAbbreviation}-ballerina:build") ||
                graph.hasTask(":${packageAbbreviation}-ballerina:publish") ||
                graph.hasTask(":${packageAbbreviation}-ballerina:publishToMavenLocal")) {
            needSeparateTest = false
            needBuildWithTest = true
            if (graph.hasTask(":${packageAbbreviation}-ballerina:publish")) {
                needPublishToCentral = true
            }
        } else {
            needSeparateTest = true
        }

        if (graph.hasTask(":${packageAbbreviation}-ballerina:test")) {
            testParams = "--code-coverage --includes=*"
        } else {
            testParams = "--skip-tests"
        }
    }
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/extracted-distribution", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    into bDistribution

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def ballerinaConfigFile = new File("${project.projectDir}/CompilerPlugin.toml")
def originalConfig = ballerinaConfigFile.text
def ballerinaTomlFile = new File("${project.projectDir}/Ballerina.toml")
def originalBallerinaToml = ballerinaTomlFile.text

task updateTomlFile {
    doLast {
        def newConfig = ballerinaConfigFile.text.replace("@azf.extension.version@", project.version)
        ballerinaConfigFile.text = newConfig
        def newBallerinaToml = ballerinaTomlFile.text.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaTomlFile.text = originalBallerinaToml
    }
}

def artifactParent = file("$project.projectDir/build/target/azurefunctions-ballerinax-zip/")
def artifactDocs = file("$project.buildDir/apidocs/docs/")
def artifactBala = file("$project.projectDir/target/bala")
def artifactCache = file("$project.projectDir/target/cache/")
def platform = "any"
def distributionBinPath = project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"

task ballerinaBuild {
    dependsOn unzip
    dependsOn configurations.extensionPlugin
    inputs.dir file("$project.projectDir")
    inputs.file file("$project.projectDir/Ballerina.toml")
    doLast {
        if (needSeparateTest) {
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "${balJavaDebugParam} ${distributionBinPath}/bal.bat test --code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "${balJavaDebugParam} ${distributionBinPath}/bal test --code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams}"
                }
            }
        }
        if (needBuildWithTest) {

            // Doc creation and packing
            println("Doc creation..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "${distributionBinPath}/bal.bat doc && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "${distributionBinPath}/bal doc"
                }
            }

            copy {
                from file("$project.projectDir/target/apidocs/${packageOrg}/${packageName}")
                into file("$project.buildDir/apidocs/docs/${packageName}")
            }

            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "${balJavaDebugParam} ${distributionBinPath}/bal.bat build -c ${testParams} ${debugParams} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "${balJavaDebugParam} ${distributionBinPath}/bal build -c ${testParams} ${debugParams}"
                }
            }
            // extract bala file to artifact cache directory
            println("$project.projectDir/target/bala")
            file("$project.projectDir/target/bala").eachFileMatch(~/.*.bala/) { balaFile ->
                copy {
                    from zipTree(balaFile)
                    into file("$artifactParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
                }
            }
            copy {
                from file("$project.projectDir/target/cache")
                exclude '**/*-testable.jar'
                exclude '**/tests_cache/'
                into file("$artifactParent/cache/")
            }

            file("$artifactBala").eachFileMatch(~/.*.bala/) { balaFile ->
                copy {
                    from zipTree(balaFile)
                    into file("$artifactParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
                }
                delete(balaFile)
            }
            copy {
                from file("$artifactDocs")
                into file("$artifactParent/docs")
            }
            copy {
                from file("$artifactCache")
                into file("$artifactParent/cache")
            }
            copy {
                from "$artifactParent/bala"
                into "$bDistribution/repo/bala"
            }
        }
        if (needPublishToCentral) {
            if (project.version.endsWith('-SNAPSHOT') ||
                    project.version.matches(project.ext.timestampedVersionRegex)) {
                return
            }
            if (ballerinaCentralAccessToken != null) {
                println("Publishing to the ballerina central..")
                exec {
                    workingDir project.projectDir
                    environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "$distributionBinPath/bal push"
                    }
                }
            } else {
                throw new InvalidUserDataException("Central Access Token is not present")
            }
        } else if (needPublishToLocalCentral) {
            println("Publishing to the Ballerina local central repository..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%% --repository=local"
                } else {
                    println(project.projectDir)
                    commandLine 'sh', '-c', "$distributionBinPath/bal push --repository=local"
                }
            }
        }
    }
    outputs.dir file("$artifactParent")
}

artifacts {
    bDistributionDir file: bDistribution, builtBy: unzip
    zipPartent file: artifactParent, builtBy: ballerinaBuild
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerinax-azure.functions")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

unpackStdLibs.dependsOn unzip
copyStdlibs.dependsOn unpackStdLibs

ballerinaBuild.dependsOn copyStdlibs
ballerinaBuild.dependsOn updateTomlFile
ballerinaBuild.finalizedBy revertTomlFile
ballerinaBuild.dependsOn initializeVariables
ballerinaBuild.dependsOn ":${packageAbbreviation}-extension:build"
ballerinaBuild.finalizedBy revertTomlFile
test.dependsOn ballerinaBuild
build.dependsOn ballerinaBuild
publishToMavenLocal.dependsOn build
publish.dependsOn build
